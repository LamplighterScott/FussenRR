FussenRR is a battery-operated Marklin Z model train set designed as a center piece for a dining room table.
It is completely controlled by a smart phone except for power on/off.  The name is taken from the train station
near Neuschwanstein castle in Germany.

It runs on a TalentCell Power Bank YB12011000-USB rechargeable battery (11,000 mAh), Geekcreit "Arduino Mega",
DeekRobot Motor Shield, Espressif ESP-01, Open-Smart ESP-01 Uart adapter, DF Player Mini, DSN-Mini-360 voltage
regulator (5v in 4.2v out), seven FLAMIN Robot 4 UO1 MOSFET relays, four TI 74HC595N shift registers.

The TalentCell lasts a long time inbetween charges.  It has three outputs.  The 12v output supplies the MOSFET
relays controlling eight turnouts (two solenoids each), four decouplers (one solenoid each) and one signal (two solenoids),
as well as some structure LED lights.  The 9v output supplies the motor shield for the DCC signal to the tracks and engines.
The 5v output supplies 1) the ESP-01/Adapter, 2) DF Mini Player/voltage regulator, 3) the shift
registers/turnout LEDs and 4) some LED structure lights.

The Motor Shield is piggy backed on the Mega and includes one jumper from pin 2 to 13 to configure it for DDC.
It is receives 12v from the battery.  It supplies power to the Mega and puts out the DCC signal to the main and
engine programming tracks.

The Mega operates on the 9v from the Motor Shield or five volts from the USB connection to a PC.
Serial zero is reserved for communication to a PC for script loading, debugging and engine programming via JMRI.
Serial one is for the DF Player.  Serial three is for the ESP-01.  Pinouts 2-13 (not all) are reserved for the Motor Shield.
Analog A0 and A1 pinouts measure the Motor Shield output amperage, allowing the Mega to disable the track power output
in case of a short on the tracks.  Turnouts, decouplers and signals are controlled by pinouts 22 to 49.  In order to
function as the DCC++ controller, talk to the ESP-01, DF Player, shirt registers and MOSFETs, you need to upload the
"DCCpp_Mega_MZ.ino" Arduino script to the Mega.  The upload speed is set in the script at 115,200 baud.  Make sure your
IDE (Arduino, ATOM, etc.) has the required library download to it from github, DFRobotDFPlayerMini).  The upload is carried
out on Serial Zero Tx0/Rx0 which can be accessed via the Mega's USB port from a PC.  The Mega has build-in USB to Uart
converter for this purpose.

The MOSFET circuits receive individual high signals from the Mega pin outs 22-49.  One MOSFET drives one solenoid.
Switching is via the negative outputs.  Positive is common.

The shift registers receive clock and data signals from three Mega pin outs (A13, A14, A15).  They drive all the turnout LEDs.
A series of resisters drop the voltage on the positive to each of the red and green LEDs so the brightness is
consistent between the two colors and the rest of the lighting on the set.  Switching is by the positve outputs.
Negative is common.

The DF Player is connected to the Mega's Serial One Tx1/Rx1 pins with a 1k ohm resister between the Mega's Tx1 pi
and the DF Player's Rx pin in order to drop the voltage from 5v to 3.3v.
The DF Player removable flash card is loaded with mp3 sound files.  Each MP3 file name must start with four digits.
The numbers should be in a continuous sequence: 0001xxx.mp3, 0002yyy.mp3 ... 0024zzz.mp3.
xxx, yyy and zzz can be any numberic or alphabet letters of any length; no spaces; dash or underscore are okay.

The ESP-01/adaptor is connected to the Mega's Serial Three Tx3/Rx3 pin outs.  The ESP-01 should be the 1mB size.
The ESP-01 communicates via WiFi to a smart phone using either WiThrottle for the Android or iPhone, or via a HTML
page tested on an iPhone and Safari.  The scripts for these two are different for the ESP-01.  The ESP-01 must be
removed from the set and plugged into a USB adapter for uploading scripts and/or data files from a PC.  For the
WiThrottle app, upload the script "WiThrottleOutputsVS.ino" to the ESP-01.   WiThrottle doesn't need any data files.
For the Safari version, you need to upload the script "FussenThrottle.ino" and the data files to the ESP-01.
The data files (FussenCSS.css, FusenHTML.html and FussenJS.js) need to be in a folder named "data".
For the Arduino IDE, the data folder needs to be at the same path level as the .ino file.  To upload the data files,
select "Tools" / "ESP8266 Sketch Data Upload".  For the ATOM IDE, the data folder needs to be at the path same level
as the "src" folder that incudes the .ino file.  For uploading the data files in ATOM, select "PlatformIO" / "Run other
target..." and then "PIO Uplaod File System image".  Upload speed is set in the script as 115,200 baud.  Make sure your
IDE has the required libraries downloaded to it (ESP8266WiFi, ESP8266mDNS, ESP8266WebServer, FS, DNSServer, WebSocketServer)

The URL is set in the script as "10.10.10.10" without a password.  To use either one, you need to switch your smartPhone to
the "FussenRR" WiFi server in Settings.  Your smartPhone will seek your normal WiFi server after the train set power is
turned off.  The name can be changed in the ESP-01 script.  For WiThrottle, you need to download the app and then enter
the URL (10.10.10.10).  For the HTML version, you only need to enter 10.10.10.10 in the Safari search field.   

Two types of engine decoders are employed, VELMO and DigiTrax.  The DigiTrax (DZ123MO for Z 88584 and DZ123MK1) boards
provide speed and direction control for the engines and the id is resettable.  However, I cannot enable the basic
functionality, such as, light on/off and shunting using DCC++ through JMRI.  The VELMO (LDS26306 for BR111 and LDS22331
for BR103) boards fit the two of the other engines I have which are not supported by DigiTrax.  The default functions
all work well.  However, I have not figured how to change the VELMO id and set-up with DCC++ and JMRI.  My other
challenge is to adapt a Marklin 81360 snow plow set to DCC.


Development notes:

The turnouts were first operated by Darlington relays (ULN2803APG) - what you see in the early photos with bread boards.
These worked fine in testing and for the turnouts near (<30cm) to the relays.  However, the output was too weak for the
turnouts at the far end of the layout which are almost a meter away.  The voltage drop of about 3-4v from the Darlingtons
was too great.  The wiring is small (24-26ga) running close in parallel. The Marklin turnouts are desigend to be supplied
with 10v AC from the Marklin power supply.  As we know, the voltage drop for AC over a distance is lower than DC.
Furthermore, running 12v DC imparts less umpf to the solenoids than 10v AC.

As a solution, I considered making my own MOSFET relay cirucit board, employing several FLAMIN Robot 4 UO1 MOSFET boards
or the 32 MOSFET array solution from Cross Roads Fencing Center (http://crossroadsfencing.com/BobuinoRev17/index.html).
MOSFETs have a much smaller voltage drop than Darlingtons.  I tried one FLAMIN board and it worked, although I had to
bipass one of the photocouplers - you get what you pay for.  They connect to the Mega invididual output pins via a
photocoupler so the 12V is electrically isolated from the Mega 5v output pins.  They take up a little more room than
the Cross Roads board.  The Cross Roads board would connect to the Mega via shift registers.  This would require way
fewer connections (3 signal connections for 32 relays vs 32 pinout connections for the equivalent number of relays using
the FLAMIN boards) and the board could be connected in series to the turnout signal light LED shift registers.  If I was
starting from scratch, I would go with the Cross Roads solution.  The Mega script would have to be modified, as well.
Furthermore, the DF Player and ESP-01 communication could be converted to SoftSerial and the Mega reduced to an Uno or
possibly something even smaller, if a smaller motor shield could be found that runs DCC adequately - not all motor
shields work for DCC++.


